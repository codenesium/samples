{"version":3,"sources":["components/header.tsx","app.tsx","constants.tsx","components/dashboard.tsx","lib/components/loadingForm.tsx","lib/components/errorForm.tsx","api/models.ts","components/device/deviceViewModel.tsx","components/device/deviceMapper.tsx","components/device/deviceCreateForm.tsx","components/device/deviceDetailForm.tsx","components/device/deviceEditForm.tsx","components/device/deviceSearchForm.tsx","components/deviceAction/deviceActionViewModel.tsx","components/deviceAction/deviceActionMapper.tsx","components/deviceAction/deviceActionCreateForm.tsx","components/deviceAction/deviceActionDetailForm.tsx","components/deviceAction/deviceActionEditForm.tsx","components/deviceAction/deviceActionSearchForm.tsx","router.tsx","index.tsx"],"names":["Header","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","menuExpanded","inherits","createClass","key","value","e","setState","_this2","react","className","id","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","handleClick","Link","to","React","App","props","header_Header","Constants","ApiHealthEndpoint","ApiEndpoint","BaseEndpoint","SwaggerEndpoint","ClientRoutes","Devices","DeviceActions","ApiRoutes","Dashboard","connected","connecting","objectSpread","axios","get","headers","Content-Type","then","resp","console","log","error","testConnection","_this3","alert","target","LoadingForm","ErrorForm","message","DeviceClientRequestModel","dateOfLastPing","undefined","isActive","name","publicId","DeviceActionClientRequestModel","action","deviceId","deviceIdEntity","deviceIdNavigation","DeviceViewModel","String","DeviceMapper","dto","response","setProperties","model","Api","DeviceCreate","withFormik","mapPropsToValues","validate","values","errors","handleSubmit","actions","setStatus","mapper","post","mapViewModelToApiRequest","data","displayName","status","errorsForField","touched","validationErrors","find","f","propertyName","toLowerCase","filter","errorMessage","errorExistForField","react_default","a","createElement","onSubmit","role","htmlFor","formik_esm","checked","disabled","success","DeviceCreateComponent","loading","loaded","errorOccurred","loadingForm_LoadingForm","errorForm_ErrorForm","Component","DeviceDetailDisplay","history","push","DeviceDetailComponent","match","params","mapApiResponseToViewModel","deviceDetailForm_DeviceDetailDisplay","DeviceEdit","put","DeviceEditComponent","DeviceSearchComponent","deleteSubmitted","deleteSuccess","deleteResponse","records","filteredRecords","searchValue","loadRecords","row","delete","currentTarget","query","searchEndpoint","viewModels","forEach","x","_this4","errorResponse","placeholder","onChange","handleSearchChanged","handleCreateClick","es","columns","accessor","Cell","original","handleDetailClick","handleEditClick","handleDeleteClick","DeviceActionViewModel","DeviceActionMapper","DeviceActionCreate","DeviceActionCreateComponent","DeviceActionDetailDisplay","toDisplay","DeviceActionDetailComponent","deviceActionDetailForm_DeviceActionDetailDisplay","DeviceActionEdit","DeviceActionEditComponent","DeviceActionSearchComponent","preventDefault","config","clientId","issuer","redirectUri","scope","ReactDOM","render","URLSearchParams","location","search","BrowserRouter","dist","client_id","redirect_uri","Route","component","path","Switch","exact","document","getElementById"],"mappings":"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","file":"static/js/main.65d4578f.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  menuExpanded: boolean;\r\n}\r\n\r\nexport class Header extends React.Component<Props, State> {\r\n  state = { menuExpanded: false };\r\n\r\n  handleClick(e: React.FormEvent) {\r\n    this.setState({ menuExpanded: !this.state.menuExpanded });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row col-12\">\r\n        <nav\r\n          className=\"navbar navbar-expand-lg navbar-light bg-white\"\r\n          id=\"navbar\"\r\n        >\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            ESPIOT\r\n          </a>\r\n\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n            onClick={e => this.handleClick(e)}\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n\r\n          <div\r\n            className={\r\n              this.state.menuExpanded\r\n                ? 'collapse.expand navbar-collapse'\r\n                : 'collapse navbar-collapse'\r\n            }\r\n            id=\"navbarSupportedContent\"\r\n          >\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link\"\r\n                  to=\"/devices\"\r\n                  onClick={e => this.handleClick(e)}\r\n                >\r\n                  Devices\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link\"\r\n                  to=\"/deviceactions\"\r\n                  onClick={e => this.handleClick(e)}\r\n                >\r\n                  DeviceActions\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>5a58653738c23da983548fb6e373c62b</Hash>\r\n</Codenesium>*/","import * as React from 'react';\r\nimport {Header} from './components/header'\r\nexport const App: React.StatelessComponent<{}> = (props) => {\r\n  return (\r\n    <Header />\r\n  );\r\n}","export class Constants {\r\n  static readonly BaseEndpoint = 'http://localhost:8000/';\r\n  static readonly ApiEndpoint = Constants.BaseEndpoint + 'api/';\r\n  static readonly ApiHealthEndpoint = Constants.ApiEndpoint + 'apiHealth';\r\n  static readonly SwaggerEndpoint = Constants.BaseEndpoint + 'swagger';\r\n}\r\n\r\nexport class ClientRoutes {\r\n  static readonly Devices = '/devices';\r\n  static readonly DeviceActions = '/deviceactions';\r\n}\r\n\r\nexport class ApiRoutes {\r\n  static readonly Devices = 'devices';\r\n  static readonly DeviceActions = 'deviceactions';\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>469f332a78d2ca9496d51ae93e8e885f</Hash>\r\n</Codenesium>*/","import * as React from 'react';\r\nimport axios from 'axios';\r\nimport { Constants } from '../constants';\r\n\r\n\r\ninterface DashboardComponentProps{\r\n}\r\n\r\ninterface DashboardComponentState{\r\n  connected:boolean;\r\n  connecting:boolean;\r\n}\r\n\r\nexport default class Dashboard extends React.Component<DashboardComponentProps, DashboardComponentState>  {\r\n  \r\n  state = ({connected:false, connecting:false});\r\n\r\n  testConnection() {\r\n    this.setState({...this.state,connecting:true});\r\n\r\n    axios.get(Constants.ApiHealthEndpoint, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n    .then(\r\n      resp => {\r\n\r\n        console.log(resp);\r\n        this.setState({connecting:false, connected:true});\r\n\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        this.setState({connecting:false, connected:false});\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n     this.testConnection();\r\n  }\r\n\r\n  render() {\r\n      let alert:JSX.Element = <div></div>;\r\n      if(this.state.connecting){\r\n        alert = <div>\r\n                 <div className=\"alert alert-primary\">Connecting...</div>\r\n               </div>;\r\n      }\r\n      else if(this.state.connected){\r\n        alert = <div>\r\n                 <div className=\"alert alert-success\">Connected...</div>\r\n               </div>;\r\n      }\r\n      else {\r\n        alert = <div>\r\n                  <div className=\"alert alert-danger\">Unable to connect to API...  <button className=\"btn btn-primary\" onClick={(e) => this.testConnection()}>Test Connection</button></div>\r\n                </div>;\r\n      }\r\n\r\n      return <div>\r\n        {alert}\r\n        <div>API Health Endpoint : <a target=\"_blank\" href={Constants.ApiHealthEndpoint}>{Constants.ApiHealthEndpoint}</a></div>\r\n        <div>Swagger Endpoint : <a target=\"_blank\" href={Constants.SwaggerEndpoint}>{Constants.SwaggerEndpoint}</a></div>\r\n      </div>;\r\n  }\r\n}","import * as React from 'react'\r\n\r\nexport const LoadingForm: React.SFC<{}> = () => {\r\n return <div>loading...</div>;\r\n}","import * as React from 'react'\r\n\r\ninterface ErrorFormProps\r\n{\r\n    message:string;\r\n}\r\nexport const ErrorForm: React.SFC<ErrorFormProps> = (props) => {\r\n   return <div className=\"alert alert-danger\">{props.message}</div>;\r\n}","export class DeviceClientRequestModel {\r\n  dateOfLastPing: any;\r\n  id: number;\r\n  isActive: boolean;\r\n  name: string;\r\n  publicId: any;\r\n\r\n  constructor() {\r\n    this.dateOfLastPing = undefined;\r\n    this.id = 0;\r\n    this.isActive = false;\r\n    this.name = '';\r\n    this.publicId = undefined;\r\n  }\r\n\r\n  setProperties(\r\n    dateOfLastPing: any,\r\n    id: number,\r\n    isActive: boolean,\r\n    name: string,\r\n    publicId: any\r\n  ): void {\r\n    this.dateOfLastPing = dateOfLastPing;\r\n    this.id = id;\r\n    this.isActive = isActive;\r\n    this.name = name;\r\n    this.publicId = publicId;\r\n  }\r\n}\r\n\r\nexport class DeviceClientResponseModel {\r\n  dateOfLastPing: any;\r\n  id: number;\r\n  isActive: boolean;\r\n  name: string;\r\n  publicId: any;\r\n\r\n  constructor() {\r\n    this.dateOfLastPing = undefined;\r\n    this.id = 0;\r\n    this.isActive = false;\r\n    this.name = '';\r\n    this.publicId = undefined;\r\n  }\r\n\r\n  setProperties(\r\n    dateOfLastPing: any,\r\n    id: number,\r\n    isActive: boolean,\r\n    name: string,\r\n    publicId: any\r\n  ): void {\r\n    this.dateOfLastPing = dateOfLastPing;\r\n    this.id = id;\r\n    this.isActive = isActive;\r\n    this.name = name;\r\n    this.publicId = publicId;\r\n  }\r\n}\r\nexport class DeviceActionClientRequestModel {\r\n  action: string;\r\n  deviceId: number;\r\n  deviceIdEntity: string;\r\n  deviceIdNavigation?: DeviceClientResponseModel;\r\n  id: number;\r\n  name: string;\r\n\r\n  constructor() {\r\n    this.action = '';\r\n    this.deviceId = 0;\r\n    this.deviceIdEntity = '';\r\n    this.deviceIdNavigation = undefined;\r\n    this.id = 0;\r\n    this.name = '';\r\n  }\r\n\r\n  setProperties(\r\n    action: string,\r\n    deviceId: number,\r\n    id: number,\r\n    name: string\r\n  ): void {\r\n    this.action = action;\r\n    this.deviceId = deviceId;\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class DeviceActionClientResponseModel {\r\n  action: string;\r\n  deviceId: number;\r\n  deviceIdEntity: string;\r\n  deviceIdNavigation?: DeviceClientResponseModel;\r\n  id: number;\r\n  name: string;\r\n\r\n  constructor() {\r\n    this.action = '';\r\n    this.deviceId = 0;\r\n    this.deviceIdEntity = '';\r\n    this.deviceIdNavigation = undefined;\r\n    this.id = 0;\r\n    this.name = '';\r\n  }\r\n\r\n  setProperties(\r\n    action: string,\r\n    deviceId: number,\r\n    id: number,\r\n    name: string\r\n  ): void {\r\n    this.action = action;\r\n    this.deviceId = deviceId;\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>54f92f98355b863248807b0a6041d247</Hash>\r\n</Codenesium>*/","export default class DeviceViewModel {\r\n  dateOfLastPing: any;\r\n  id: number;\r\n  isActive: boolean;\r\n  name: string;\r\n  publicId: any;\r\n\r\n  constructor() {\r\n    this.dateOfLastPing = undefined;\r\n    this.id = 0;\r\n    this.isActive = false;\r\n    this.name = '';\r\n    this.publicId = undefined;\r\n  }\r\n\r\n  setProperties(\r\n    dateOfLastPing: any,\r\n    id: number,\r\n    isActive: boolean,\r\n    name: string,\r\n    publicId: any\r\n  ): void {\r\n    this.dateOfLastPing = dateOfLastPing;\r\n    this.id = id;\r\n    this.isActive = isActive;\r\n    this.name = name;\r\n    this.publicId = publicId;\r\n  }\r\n\r\n  toDisplay(): string {\r\n    return String(this.name);\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>d08c76d81194a46b6a319ecf6310837c</Hash>\r\n</Codenesium>*/","import * as Api from '../../api/models';\r\nimport DeviceViewModel from './deviceViewModel';\r\nexport default class DeviceMapper {\r\n  mapApiResponseToViewModel(\r\n    dto: Api.DeviceClientResponseModel\r\n  ): DeviceViewModel {\r\n    let response = new DeviceViewModel();\r\n    response.setProperties(\r\n      dto.dateOfLastPing,\r\n      dto.id,\r\n      dto.isActive,\r\n      dto.name,\r\n      dto.publicId\r\n    );\r\n\r\n    return response;\r\n  }\r\n\r\n  mapViewModelToApiRequest(\r\n    model: DeviceViewModel\r\n  ): Api.DeviceClientRequestModel {\r\n    let response = new Api.DeviceClientRequestModel();\r\n    response.setProperties(\r\n      model.dateOfLastPing,\r\n      model.id,\r\n      model.isActive,\r\n      model.name,\r\n      model.publicId\r\n    );\r\n    return response;\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>b5f1682d2affcb125e56c5c34220d67f</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { CreateResponse } from '../../api/ApiObjects';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport * as Api from '../../api/models';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport DeviceMapper from './deviceMapper';\r\nimport DeviceViewModel from './deviceViewModel';\r\n\r\ninterface Props {\r\n  model?: DeviceViewModel;\r\n}\r\n\r\nconst DeviceCreateDisplay: React.SFC<FormikProps<DeviceViewModel>> = (\r\n  props: FormikProps<DeviceViewModel>\r\n) => {\r\n  let status = props.status as CreateResponse<Api.DeviceClientRequestModel>;\r\n\r\n  let errorsForField = (name: string): string => {\r\n    let response = '';\r\n    if (\r\n      props.touched[name as keyof DeviceViewModel] &&\r\n      props.errors[name as keyof DeviceViewModel]\r\n    ) {\r\n      response += props.errors[name as keyof DeviceViewModel];\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      status.validationErrors &&\r\n      status.validationErrors.find(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )\r\n    ) {\r\n      response += status.validationErrors.filter(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )[0].errorMessage;\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  let errorExistForField = (name: string): boolean => {\r\n    return errorsForField(name) != '';\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit} role=\"form\">\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('name')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"name\"\r\n            className={\r\n              errorExistForField('name')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('name') && (\r\n            <small className=\"text-danger\">{errorsForField('name')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('publicId')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Public Id\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"publicId\"\r\n            className={\r\n              errorExistForField('publicId')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('publicId') && (\r\n            <small className=\"text-danger\">{errorsForField('publicId')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('dateOfLastPing')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Last Ping\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"datetime-local\"\r\n            name=\"dateOfLastPing\"\r\n            className={\r\n              errorExistForField('dateOfLastPing')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('dateOfLastPing') && (\r\n            <small className=\"text-danger\">\r\n              {errorsForField('dateOfLastPing')}\r\n            </small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('isActive')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Active\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"checkbox\"\r\n            checked={props.values.isActive}\r\n            name=\"isActive\"\r\n            className={\r\n              errorExistForField('isActive')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('isActive') && (\r\n            <small className=\"text-danger\">{errorsForField('isActive')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"btn btn-primary\" disabled={false}>\r\n        Submit\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {status && status.success ? (\r\n        <div className=\"alert alert-success\">Success</div>\r\n      ) : null}\r\n\r\n      {status && !status.success ? (\r\n        <div className=\"alert alert-danger\">Error occurred</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DeviceCreate = withFormik<Props, DeviceViewModel>({\r\n  mapPropsToValues: props => {\r\n    let response = new DeviceViewModel();\r\n    if (props.model != undefined) {\r\n      response.setProperties(\r\n        props.model!.dateOfLastPing,\r\n        props.model!.id,\r\n        props.model!.isActive,\r\n        props.model!.name,\r\n        props.model!.publicId\r\n      );\r\n    }\r\n    return response;\r\n  },\r\n\r\n  validate: values => {\r\n    let errors: FormikErrors<DeviceViewModel> = {};\r\n\r\n    if (values.dateOfLastPing == undefined) {\r\n      errors.dateOfLastPing = 'Required';\r\n    }\r\n    if (values.name == '') {\r\n      errors.name = 'Required';\r\n    }\r\n    if (values.publicId == undefined) {\r\n      errors.publicId = 'Required';\r\n    }\r\n\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: (values, actions) => {\r\n    actions.setStatus(undefined);\r\n    let mapper = new DeviceMapper();\r\n\r\n    axios\r\n      .post(\r\n        Constants.ApiEndpoint + ApiRoutes.Devices,\r\n        mapper.mapViewModelToApiRequest(values),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as CreateResponse<\r\n            Api.DeviceClientRequestModel\r\n          >;\r\n          actions.setStatus(response);\r\n          console.log(response);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          actions.setStatus('Error from API');\r\n        }\r\n      );\r\n  },\r\n  displayName: 'DeviceCreate',\r\n})(DeviceCreateDisplay);\r\n\r\ninterface DeviceCreateComponentProps {}\r\n\r\ninterface DeviceCreateComponentState {\r\n  model?: DeviceViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceCreateComponent extends React.Component<\r\n  DeviceCreateComponentProps,\r\n  DeviceCreateComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: true,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return <DeviceCreate model={this.state.model} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>0dc00e4616755393d2c2027894113040</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as Api from '../../api/models';\r\nimport { UpdateResponse } from '../../api/ApiObjects';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport DeviceMapper from './deviceMapper';\r\nimport DeviceViewModel from './deviceViewModel';\r\n\r\ninterface Props {\r\n  history: any;\r\n  model?: DeviceViewModel;\r\n}\r\n\r\nconst DeviceDetailDisplay = (model: Props) => {\r\n  return (\r\n    <form role=\"form\">\r\n      <button\r\n        className=\"btn btn-primary btn-sm align-middle float-right vertically-center\"\r\n        onClick={e => {\r\n          model.history.push(ClientRoutes.Devices + '/edit/' + model.model!.id);\r\n        }}\r\n      >\r\n        <i className=\"fas fa-edit\" />\r\n      </button>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"name\" className={'col-sm-2 col-form-label'}>\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.name)}</div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"publicId\" className={'col-sm-2 col-form-label'}>\r\n          Public Id\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.publicId)}</div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"dateOfLastPing\" className={'col-sm-2 col-form-label'}>\r\n          Last Ping\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.dateOfLastPing)}</div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"isActive\" className={'col-sm-2 col-form-label'}>\r\n          Active\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.isActive)}</div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ninterface IParams {\r\n  id: number;\r\n}\r\n\r\ninterface IMatch {\r\n  params: IParams;\r\n}\r\n\r\ninterface DeviceDetailComponentProps {\r\n  match: IMatch;\r\n  history: any;\r\n}\r\n\r\ninterface DeviceDetailComponentState {\r\n  model?: DeviceViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceDetailComponent extends React.Component<\r\n  DeviceDetailComponentProps,\r\n  DeviceDetailComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: false,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ...this.state, loading: true });\r\n\r\n    axios\r\n      .get(\r\n        Constants.ApiEndpoint +\r\n          ApiRoutes.Devices +\r\n          '/' +\r\n          this.props.match.params.id,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Api.DeviceClientResponseModel;\r\n\r\n          let mapper = new DeviceMapper();\r\n\r\n          console.log(response);\r\n\r\n          this.setState({\r\n            model: mapper.mapApiResponseToViewModel(response),\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            model: undefined,\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return (\r\n        <DeviceDetailDisplay\r\n          history={this.props.history}\r\n          model={this.state.model}\r\n        />\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>c0929c91d2ea761e43ea179282ba16e3</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as Api from '../../api/models';\r\nimport { UpdateResponse } from '../../api/ApiObjects';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport DeviceViewModel from './deviceViewModel';\r\nimport DeviceMapper from './deviceMapper';\r\n\r\ninterface Props {\r\n  model?: DeviceViewModel;\r\n}\r\n\r\nconst DeviceEditDisplay = (props: FormikProps<DeviceViewModel>) => {\r\n  let status = props.status as UpdateResponse<Api.DeviceClientRequestModel>;\r\n\r\n  let errorsForField = (name: string): string => {\r\n    let response = '';\r\n    if (\r\n      props.touched[name as keyof DeviceViewModel] &&\r\n      props.errors[name as keyof DeviceViewModel]\r\n    ) {\r\n      response += props.errors[name as keyof DeviceViewModel];\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      status.validationErrors &&\r\n      status.validationErrors.find(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )\r\n    ) {\r\n      response += status.validationErrors.filter(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )[0].errorMessage;\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  let errorExistForField = (name: string): boolean => {\r\n    return errorsForField(name) != '';\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit} role=\"form\">\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('name')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"name\"\r\n            className={\r\n              errorExistForField('name')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('name') && (\r\n            <small className=\"text-danger\">{errorsForField('name')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('publicId')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Public Id\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"publicId\"\r\n            className={\r\n              errorExistForField('publicId')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('publicId') && (\r\n            <small className=\"text-danger\">{errorsForField('publicId')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('dateOfLastPing')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Last Ping\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"datetime-local\"\r\n            name=\"dateOfLastPing\"\r\n            className={\r\n              errorExistForField('dateOfLastPing')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('dateOfLastPing') && (\r\n            <small className=\"text-danger\">\r\n              {errorsForField('dateOfLastPing')}\r\n            </small>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('isActive')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Active\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"checkbox\"\r\n            checked={props.values.isActive}\r\n            name=\"isActive\"\r\n            className={\r\n              errorExistForField('isActive')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('isActive') && (\r\n            <small className=\"text-danger\">{errorsForField('isActive')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"btn btn-primary\" disabled={false}>\r\n        Submit\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {status && status.success ? (\r\n        <div className=\"alert alert-success\">Success</div>\r\n      ) : null}\r\n\r\n      {status && !status.success ? (\r\n        <div className=\"alert alert-danger\">Error occurred</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DeviceEdit = withFormik<Props, DeviceViewModel>({\r\n  mapPropsToValues: props => {\r\n    let response = new DeviceViewModel();\r\n    response.setProperties(\r\n      props.model!.dateOfLastPing,\r\n      props.model!.id,\r\n      props.model!.isActive,\r\n      props.model!.name,\r\n      props.model!.publicId\r\n    );\r\n    return response;\r\n  },\r\n\r\n  // Custom sync validation\r\n  validate: values => {\r\n    let errors: FormikErrors<DeviceViewModel> = {};\r\n\r\n    if (values.dateOfLastPing == undefined) {\r\n      errors.dateOfLastPing = 'Required';\r\n    }\r\n    if (values.id == 0) {\r\n      errors.id = 'Required';\r\n    }\r\n    if (values.name == '') {\r\n      errors.name = 'Required';\r\n    }\r\n    if (values.publicId == undefined) {\r\n      errors.publicId = 'Required';\r\n    }\r\n\r\n    return errors;\r\n  },\r\n  handleSubmit: (values, actions) => {\r\n    actions.setStatus(undefined);\r\n\r\n    let mapper = new DeviceMapper();\r\n\r\n    axios\r\n      .put(\r\n        Constants.ApiEndpoint + ApiRoutes.Devices + '/' + values.id,\r\n\r\n        mapper.mapViewModelToApiRequest(values),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as UpdateResponse<\r\n            Api.DeviceClientRequestModel\r\n          >;\r\n          actions.setStatus(response);\r\n          console.log(response);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          actions.setStatus('Error from API');\r\n        }\r\n      )\r\n      .then(response => {\r\n        // cleanup\r\n      });\r\n  },\r\n\r\n  displayName: 'DeviceEdit',\r\n})(DeviceEditDisplay);\r\n\r\ninterface IParams {\r\n  id: number;\r\n}\r\n\r\ninterface IMatch {\r\n  params: IParams;\r\n}\r\n\r\ninterface DeviceEditComponentProps {\r\n  match: IMatch;\r\n}\r\n\r\ninterface DeviceEditComponentState {\r\n  model?: DeviceViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceEditComponent extends React.Component<\r\n  DeviceEditComponentProps,\r\n  DeviceEditComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: false,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ...this.state, loading: true });\r\n\r\n    axios\r\n      .get(\r\n        Constants.ApiEndpoint +\r\n          ApiRoutes.Devices +\r\n          '/' +\r\n          this.props.match.params.id,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Api.DeviceClientResponseModel;\r\n\r\n          console.log(response);\r\n\r\n          let mapper = new DeviceMapper();\r\n\r\n          this.setState({\r\n            model: mapper.mapApiResponseToViewModel(response),\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            model: undefined,\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return <DeviceEdit model={this.state.model} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>fa4b0c92c0eb3a327782ab1196fbf004</Hash>\r\n</Codenesium>*/","import React, { Component, ReactElement, ReactHTMLElement } from 'react';\r\nimport axios from 'axios';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as Api from '../../api/models';\r\nimport DeviceMapper from './deviceMapper';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport ReactTable from 'react-table';\r\nimport DeviceViewModel from './deviceViewModel';\r\nimport 'react-table/react-table.css';\r\n\r\ninterface DeviceSearchComponentProps {\r\n  history: any;\r\n}\r\n\r\ninterface DeviceSearchComponentState {\r\n  records: Array<DeviceViewModel>;\r\n  filteredRecords: Array<DeviceViewModel>;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n  searchValue: string;\r\n  deleteSubmitted: boolean;\r\n  deleteSuccess: boolean;\r\n  deleteResponse: string;\r\n}\r\n\r\nexport default class DeviceSearchComponent extends React.Component<\r\n  DeviceSearchComponentProps,\r\n  DeviceSearchComponentState\r\n> {\r\n  state = {\r\n    deleteSubmitted: false,\r\n    deleteSuccess: false,\r\n    deleteResponse: '',\r\n    records: new Array<DeviceViewModel>(),\r\n    filteredRecords: new Array<DeviceViewModel>(),\r\n    searchValue: '',\r\n    loading: false,\r\n    loaded: true,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadRecords();\r\n  }\r\n\r\n  handleEditClick(e: any, row: Api.DeviceClientResponseModel) {\r\n    this.props.history.push(ClientRoutes.Devices + '/edit/' + row.id);\r\n  }\r\n\r\n  handleDetailClick(e: any, row: Api.DeviceClientResponseModel) {\r\n    this.props.history.push(ClientRoutes.Devices + '/' + row.id);\r\n  }\r\n\r\n  handleCreateClick(e: any) {\r\n    this.props.history.push(ClientRoutes.Devices + '/create');\r\n  }\r\n\r\n  handleDeleteClick(e: any, row: Api.DeviceClientResponseModel) {\r\n    axios\r\n      .delete(Constants.ApiEndpoint + ApiRoutes.Devices + '/' + row.id, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      .then(\r\n        resp => {\r\n          this.setState({\r\n            ...this.state,\r\n            deleteResponse: 'Record deleted',\r\n            deleteSuccess: true,\r\n            deleteSubmitted: true,\r\n          });\r\n          this.loadRecords(this.state.searchValue);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            ...this.state,\r\n            deleteResponse: 'Error deleting record',\r\n            deleteSuccess: false,\r\n            deleteSubmitted: true,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  handleSearchChanged(e: React.FormEvent<HTMLInputElement>) {\r\n    this.loadRecords(e.currentTarget.value);\r\n  }\r\n\r\n  loadRecords(query: string = '') {\r\n    this.setState({ ...this.state, searchValue: query });\r\n    let searchEndpoint =\r\n      Constants.ApiEndpoint + ApiRoutes.Devices + '?limit=100';\r\n\r\n    if (query) {\r\n      searchEndpoint += '&query=' + query;\r\n    }\r\n\r\n    axios\r\n      .get(searchEndpoint, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Array<Api.DeviceClientResponseModel>;\r\n          let viewModels: Array<DeviceViewModel> = [];\r\n          let mapper = new DeviceMapper();\r\n\r\n          response.forEach(x => {\r\n            viewModels.push(mapper.mapApiResponseToViewModel(x));\r\n          });\r\n\r\n          this.setState({\r\n            records: viewModels,\r\n            filteredRecords: viewModels,\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            records: new Array<DeviceViewModel>(),\r\n            filteredRecords: new Array<DeviceViewModel>(),\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  filterGrid() {}\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      let errorResponse: JSX.Element = <span />;\r\n\r\n      if (this.state.deleteSubmitted) {\r\n        if (this.state.deleteSuccess) {\r\n          errorResponse = (\r\n            <div className=\"alert alert-success\">\r\n              {this.state.deleteResponse}\r\n            </div>\r\n          );\r\n        } else {\r\n          errorResponse = (\r\n            <div className=\"alert alert-danger\">\r\n              {this.state.deleteResponse}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      return (\r\n        <div>\r\n          {errorResponse}\r\n          <form>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-4\" />\r\n              <div className=\"col-sm-4\">\r\n                <input\r\n                  name=\"search\"\r\n                  className=\"form-control\"\r\n                  placeholder={'Search'}\r\n                  value={this.state.searchValue}\r\n                  onChange={e => this.handleSearchChanged(e)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-4\">\r\n                <button\r\n                  className=\"btn btn-primary btn-sm align-middle float-right vertically-center search-create-button\"\r\n                  onClick={e => this.handleCreateClick(e)}\r\n                >\r\n                  <i className=\"fas fa-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <ReactTable\r\n            data={this.state.filteredRecords}\r\n            columns={[\r\n              {\r\n                Header: 'Device',\r\n                columns: [\r\n                  {\r\n                    Header: 'Name',\r\n                    accessor: 'name',\r\n                    Cell: props => {\r\n                      return <span>{String(props.original.name)}</span>;\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Public Id',\r\n                    accessor: 'publicId',\r\n                    Cell: props => {\r\n                      return <span>{String(props.original.publicId)}</span>;\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Last Ping',\r\n                    accessor: 'dateOfLastPing',\r\n                    Cell: props => {\r\n                      return (\r\n                        <span>{String(props.original.dateOfLastPing)}</span>\r\n                      );\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Active',\r\n                    accessor: 'isActive',\r\n                    Cell: props => {\r\n                      return <span>{String(props.original.isActive)}</span>;\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Actions',\r\n                    Cell: row => (\r\n                      <div>\r\n                        <button\r\n                          className=\"btn btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleDetailClick(\r\n                              e,\r\n                              row.original as Api.DeviceClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"fas fa-search\" />\r\n                        </button>\r\n                        &nbsp;\r\n                        <button\r\n                          className=\"btn btn-primary btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleEditClick(\r\n                              e,\r\n                              row.original as Api.DeviceClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"fas fa-edit\" />\r\n                        </button>\r\n                        &nbsp;\r\n                        <button\r\n                          className=\"btn btn-danger btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleDeleteClick(\r\n                              e,\r\n                              row.original as Api.DeviceClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"far fa-trash-alt\" />\r\n                        </button>\r\n                      </div>\r\n                    ),\r\n                  },\r\n                ],\r\n              },\r\n            ]}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>511ac3c3ec172bc7b7ce8489e5ae5706</Hash>\r\n</Codenesium>*/","import DeviceViewModel from '../device/deviceViewModel';\r\n\r\nexport default class DeviceActionViewModel {\r\n  action: string;\r\n  deviceId: number;\r\n  deviceIdEntity: string;\r\n  deviceIdNavigation?: DeviceViewModel;\r\n  id: number;\r\n  name: string;\r\n\r\n  constructor() {\r\n    this.action = '';\r\n    this.deviceId = 0;\r\n    this.deviceIdEntity = '';\r\n    this.deviceIdNavigation = undefined;\r\n    this.id = 0;\r\n    this.name = '';\r\n  }\r\n\r\n  setProperties(\r\n    action: string,\r\n    deviceId: number,\r\n    id: number,\r\n    name: string\r\n  ): void {\r\n    this.action = action;\r\n    this.deviceId = deviceId;\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n\r\n  toDisplay(): string {\r\n    return String(this.name);\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>7131d7ca1e6f714b80441c0b6c86a6c8</Hash>\r\n</Codenesium>*/","import * as Api from '../../api/models';\r\nimport DeviceActionViewModel from './deviceActionViewModel';\r\nimport DeviceViewModel from '../device/deviceViewModel';\r\nexport default class DeviceActionMapper {\r\n  mapApiResponseToViewModel(\r\n    dto: Api.DeviceActionClientResponseModel\r\n  ): DeviceActionViewModel {\r\n    let response = new DeviceActionViewModel();\r\n    response.setProperties(dto.action, dto.deviceId, dto.id, dto.name);\r\n\r\n    if (dto.deviceIdNavigation != null) {\r\n      response.deviceIdNavigation = new DeviceViewModel();\r\n      response.deviceIdNavigation.setProperties(\r\n        dto.deviceIdNavigation.dateOfLastPing,\r\n        dto.deviceIdNavigation.id,\r\n        dto.deviceIdNavigation.isActive,\r\n        dto.deviceIdNavigation.name,\r\n        dto.deviceIdNavigation.publicId\r\n      );\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  mapViewModelToApiRequest(\r\n    model: DeviceActionViewModel\r\n  ): Api.DeviceActionClientRequestModel {\r\n    let response = new Api.DeviceActionClientRequestModel();\r\n    response.setProperties(model.action, model.deviceId, model.id, model.name);\r\n    return response;\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>ef85d9f226fdbbb3800ec849fddfbe56</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { CreateResponse } from '../../api/ApiObjects';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport * as Api from '../../api/models';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport DeviceActionMapper from './deviceActionMapper';\r\nimport DeviceActionViewModel from './deviceActionViewModel';\r\n\r\ninterface Props {\r\n  model?: DeviceActionViewModel;\r\n}\r\n\r\nconst DeviceActionCreateDisplay: React.SFC<\r\n  FormikProps<DeviceActionViewModel>\r\n> = (props: FormikProps<DeviceActionViewModel>) => {\r\n  let status = props.status as CreateResponse<\r\n    Api.DeviceActionClientRequestModel\r\n  >;\r\n\r\n  let errorsForField = (name: string): string => {\r\n    let response = '';\r\n    if (\r\n      props.touched[name as keyof DeviceActionViewModel] &&\r\n      props.errors[name as keyof DeviceActionViewModel]\r\n    ) {\r\n      response += props.errors[name as keyof DeviceActionViewModel];\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      status.validationErrors &&\r\n      status.validationErrors.find(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )\r\n    ) {\r\n      response += status.validationErrors.filter(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )[0].errorMessage;\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  let errorExistForField = (name: string): boolean => {\r\n    return errorsForField(name) != '';\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit} role=\"form\">\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('action')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Action\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"action\"\r\n            className={\r\n              errorExistForField('action')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('action') && (\r\n            <small className=\"text-danger\">{errorsForField('action')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('deviceId')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Device\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"select\"\r\n            name=\"deviceId\"\r\n            className={\r\n              errorExistForField('deviceId')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('deviceId') && (\r\n            <small className=\"text-danger\">{errorsForField('deviceId')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('name')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"name\"\r\n            className={\r\n              errorExistForField('name')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('name') && (\r\n            <small className=\"text-danger\">{errorsForField('name')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"btn btn-primary\" disabled={false}>\r\n        Submit\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {status && status.success ? (\r\n        <div className=\"alert alert-success\">Success</div>\r\n      ) : null}\r\n\r\n      {status && !status.success ? (\r\n        <div className=\"alert alert-danger\">Error occurred</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DeviceActionCreate = withFormik<Props, DeviceActionViewModel>({\r\n  mapPropsToValues: props => {\r\n    let response = new DeviceActionViewModel();\r\n    if (props.model != undefined) {\r\n      response.setProperties(\r\n        props.model!.action,\r\n        props.model!.deviceId,\r\n        props.model!.id,\r\n        props.model!.name\r\n      );\r\n    }\r\n    return response;\r\n  },\r\n\r\n  validate: values => {\r\n    let errors: FormikErrors<DeviceActionViewModel> = {};\r\n\r\n    if (values.action == '') {\r\n      errors.action = 'Required';\r\n    }\r\n    if (values.deviceId == 0) {\r\n      errors.deviceId = 'Required';\r\n    }\r\n    if (values.name == '') {\r\n      errors.name = 'Required';\r\n    }\r\n\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: (values, actions) => {\r\n    actions.setStatus(undefined);\r\n    let mapper = new DeviceActionMapper();\r\n\r\n    axios\r\n      .post(\r\n        Constants.ApiEndpoint + ApiRoutes.DeviceActions,\r\n        mapper.mapViewModelToApiRequest(values),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as CreateResponse<\r\n            Api.DeviceActionClientRequestModel\r\n          >;\r\n          actions.setStatus(response);\r\n          console.log(response);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          actions.setStatus('Error from API');\r\n        }\r\n      );\r\n  },\r\n  displayName: 'DeviceActionCreate',\r\n})(DeviceActionCreateDisplay);\r\n\r\ninterface DeviceActionCreateComponentProps {}\r\n\r\ninterface DeviceActionCreateComponentState {\r\n  model?: DeviceActionViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceActionCreateComponent extends React.Component<\r\n  DeviceActionCreateComponentProps,\r\n  DeviceActionCreateComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: true,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return <DeviceActionCreate model={this.state.model} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>81e7191fd6702c3bbf901409a3af6446</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as Api from '../../api/models';\r\nimport { UpdateResponse } from '../../api/ApiObjects';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport DeviceActionMapper from './deviceActionMapper';\r\nimport DeviceActionViewModel from './deviceActionViewModel';\r\n\r\ninterface Props {\r\n  history: any;\r\n  model?: DeviceActionViewModel;\r\n}\r\n\r\nconst DeviceActionDetailDisplay = (model: Props) => {\r\n  return (\r\n    <form role=\"form\">\r\n      <button\r\n        className=\"btn btn-primary btn-sm align-middle float-right vertically-center\"\r\n        onClick={e => {\r\n          model.history.push(\r\n            ClientRoutes.DeviceActions + '/edit/' + model.model!.id\r\n          );\r\n        }}\r\n      >\r\n        <i className=\"fas fa-edit\" />\r\n      </button>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"action\" className={'col-sm-2 col-form-label'}>\r\n          Action\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.action)}</div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"deviceId\" className={'col-sm-2 col-form-label'}>\r\n          Device\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          {model.model!.deviceIdNavigation!.toDisplay()}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label htmlFor=\"name\" className={'col-sm-2 col-form-label'}>\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">{String(model.model!.name)}</div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ninterface IParams {\r\n  id: number;\r\n}\r\n\r\ninterface IMatch {\r\n  params: IParams;\r\n}\r\n\r\ninterface DeviceActionDetailComponentProps {\r\n  match: IMatch;\r\n  history: any;\r\n}\r\n\r\ninterface DeviceActionDetailComponentState {\r\n  model?: DeviceActionViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceActionDetailComponent extends React.Component<\r\n  DeviceActionDetailComponentProps,\r\n  DeviceActionDetailComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: false,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ...this.state, loading: true });\r\n\r\n    axios\r\n      .get(\r\n        Constants.ApiEndpoint +\r\n          ApiRoutes.DeviceActions +\r\n          '/' +\r\n          this.props.match.params.id,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Api.DeviceActionClientResponseModel;\r\n\r\n          let mapper = new DeviceActionMapper();\r\n\r\n          console.log(response);\r\n\r\n          this.setState({\r\n            model: mapper.mapApiResponseToViewModel(response),\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            model: undefined,\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return (\r\n        <DeviceActionDetailDisplay\r\n          history={this.props.history}\r\n          model={this.state.model}\r\n        />\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>caf60dcf43799f38d00a6e5d8a5cb27d</Hash>\r\n</Codenesium>*/","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as Api from '../../api/models';\r\nimport { UpdateResponse } from '../../api/ApiObjects';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { FormikProps, FormikErrors, Field, withFormik } from 'formik';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport DeviceActionViewModel from './deviceActionViewModel';\r\nimport DeviceActionMapper from './deviceActionMapper';\r\n\r\ninterface Props {\r\n  model?: DeviceActionViewModel;\r\n}\r\n\r\nconst DeviceActionEditDisplay = (props: FormikProps<DeviceActionViewModel>) => {\r\n  let status = props.status as UpdateResponse<\r\n    Api.DeviceActionClientRequestModel\r\n  >;\r\n\r\n  let errorsForField = (name: string): string => {\r\n    let response = '';\r\n    if (\r\n      props.touched[name as keyof DeviceActionViewModel] &&\r\n      props.errors[name as keyof DeviceActionViewModel]\r\n    ) {\r\n      response += props.errors[name as keyof DeviceActionViewModel];\r\n    }\r\n\r\n    if (\r\n      status &&\r\n      status.validationErrors &&\r\n      status.validationErrors.find(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )\r\n    ) {\r\n      response += status.validationErrors.filter(\r\n        f => f.propertyName.toLowerCase() == name.toLowerCase()\r\n      )[0].errorMessage;\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  let errorExistForField = (name: string): boolean => {\r\n    return errorsForField(name) != '';\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit} role=\"form\">\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('action')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Action\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"action\"\r\n            className={\r\n              errorExistForField('action')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('action') && (\r\n            <small className=\"text-danger\">{errorsForField('action')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('deviceId')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Device\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"select\"\r\n            name=\"deviceId\"\r\n            className={\r\n              errorExistForField('deviceId')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('deviceId') && (\r\n            <small className=\"text-danger\">{errorsForField('deviceId')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className={\r\n            errorExistForField('name')\r\n              ? 'col-sm-2 col-form-label is-invalid'\r\n              : 'col-sm-2 col-form-label'\r\n          }\r\n        >\r\n          Name\r\n        </label>\r\n        <div className=\"col-sm-12\">\r\n          <Field\r\n            type=\"textbox\"\r\n            name=\"name\"\r\n            className={\r\n              errorExistForField('name')\r\n                ? 'form-control is-invalid'\r\n                : 'form-control'\r\n            }\r\n          />\r\n          {errorExistForField('name') && (\r\n            <small className=\"text-danger\">{errorsForField('name')}</small>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" className=\"btn btn-primary\" disabled={false}>\r\n        Submit\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {status && status.success ? (\r\n        <div className=\"alert alert-success\">Success</div>\r\n      ) : null}\r\n\r\n      {status && !status.success ? (\r\n        <div className=\"alert alert-danger\">Error occurred</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DeviceActionEdit = withFormik<Props, DeviceActionViewModel>({\r\n  mapPropsToValues: props => {\r\n    let response = new DeviceActionViewModel();\r\n    response.setProperties(\r\n      props.model!.action,\r\n      props.model!.deviceId,\r\n      props.model!.id,\r\n      props.model!.name\r\n    );\r\n    return response;\r\n  },\r\n\r\n  // Custom sync validation\r\n  validate: values => {\r\n    let errors: FormikErrors<DeviceActionViewModel> = {};\r\n\r\n    if (values.action == '') {\r\n      errors.action = 'Required';\r\n    }\r\n    if (values.deviceId == 0) {\r\n      errors.deviceId = 'Required';\r\n    }\r\n    if (values.id == 0) {\r\n      errors.id = 'Required';\r\n    }\r\n    if (values.name == '') {\r\n      errors.name = 'Required';\r\n    }\r\n\r\n    return errors;\r\n  },\r\n  handleSubmit: (values, actions) => {\r\n    actions.setStatus(undefined);\r\n\r\n    let mapper = new DeviceActionMapper();\r\n\r\n    axios\r\n      .put(\r\n        Constants.ApiEndpoint + ApiRoutes.DeviceActions + '/' + values.id,\r\n\r\n        mapper.mapViewModelToApiRequest(values),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as UpdateResponse<\r\n            Api.DeviceActionClientRequestModel\r\n          >;\r\n          actions.setStatus(response);\r\n          console.log(response);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          actions.setStatus('Error from API');\r\n        }\r\n      )\r\n      .then(response => {\r\n        // cleanup\r\n      });\r\n  },\r\n\r\n  displayName: 'DeviceActionEdit',\r\n})(DeviceActionEditDisplay);\r\n\r\ninterface IParams {\r\n  id: number;\r\n}\r\n\r\ninterface IMatch {\r\n  params: IParams;\r\n}\r\n\r\ninterface DeviceActionEditComponentProps {\r\n  match: IMatch;\r\n}\r\n\r\ninterface DeviceActionEditComponentState {\r\n  model?: DeviceActionViewModel;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\nexport default class DeviceActionEditComponent extends React.Component<\r\n  DeviceActionEditComponentProps,\r\n  DeviceActionEditComponentState\r\n> {\r\n  state = {\r\n    model: undefined,\r\n    loading: false,\r\n    loaded: false,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ...this.state, loading: true });\r\n\r\n    axios\r\n      .get(\r\n        Constants.ApiEndpoint +\r\n          ApiRoutes.DeviceActions +\r\n          '/' +\r\n          this.props.match.params.id,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Api.DeviceActionClientResponseModel;\r\n\r\n          console.log(response);\r\n\r\n          let mapper = new DeviceActionMapper();\r\n\r\n          this.setState({\r\n            model: mapper.mapApiResponseToViewModel(response),\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            model: undefined,\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      return <DeviceActionEdit model={this.state.model} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>26660bbbf9ac2a5b57b93b491445e3b2</Hash>\r\n</Codenesium>*/","import React, { Component, ReactElement, ReactHTMLElement } from 'react';\r\nimport axios from 'axios';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as Api from '../../api/models';\r\nimport DeviceActionMapper from './deviceActionMapper';\r\nimport { Constants, ApiRoutes, ClientRoutes } from '../../constants';\r\nimport { LoadingForm } from '../../lib/components/loadingForm';\r\nimport { ErrorForm } from '../../lib/components/errorForm';\r\nimport ReactTable from 'react-table';\r\nimport DeviceActionViewModel from './deviceActionViewModel';\r\nimport 'react-table/react-table.css';\r\n\r\ninterface DeviceActionSearchComponentProps {\r\n  history: any;\r\n}\r\n\r\ninterface DeviceActionSearchComponentState {\r\n  records: Array<DeviceActionViewModel>;\r\n  filteredRecords: Array<DeviceActionViewModel>;\r\n  loading: boolean;\r\n  loaded: boolean;\r\n  errorOccurred: boolean;\r\n  errorMessage: string;\r\n  searchValue: string;\r\n  deleteSubmitted: boolean;\r\n  deleteSuccess: boolean;\r\n  deleteResponse: string;\r\n}\r\n\r\nexport default class DeviceActionSearchComponent extends React.Component<\r\n  DeviceActionSearchComponentProps,\r\n  DeviceActionSearchComponentState\r\n> {\r\n  state = {\r\n    deleteSubmitted: false,\r\n    deleteSuccess: false,\r\n    deleteResponse: '',\r\n    records: new Array<DeviceActionViewModel>(),\r\n    filteredRecords: new Array<DeviceActionViewModel>(),\r\n    searchValue: '',\r\n    loading: false,\r\n    loaded: true,\r\n    errorOccurred: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadRecords();\r\n  }\r\n\r\n  handleEditClick(e: any, row: Api.DeviceActionClientResponseModel) {\r\n    this.props.history.push(ClientRoutes.DeviceActions + '/edit/' + row.id);\r\n  }\r\n\r\n  handleDetailClick(e: any, row: Api.DeviceActionClientResponseModel) {\r\n    this.props.history.push(ClientRoutes.DeviceActions + '/' + row.id);\r\n  }\r\n\r\n  handleCreateClick(e: any) {\r\n    this.props.history.push(ClientRoutes.DeviceActions + '/create');\r\n  }\r\n\r\n  handleDeleteClick(e: any, row: Api.DeviceActionClientResponseModel) {\r\n    axios\r\n      .delete(Constants.ApiEndpoint + ApiRoutes.DeviceActions + '/' + row.id, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      .then(\r\n        resp => {\r\n          this.setState({\r\n            ...this.state,\r\n            deleteResponse: 'Record deleted',\r\n            deleteSuccess: true,\r\n            deleteSubmitted: true,\r\n          });\r\n          this.loadRecords(this.state.searchValue);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            ...this.state,\r\n            deleteResponse: 'Error deleting record',\r\n            deleteSuccess: false,\r\n            deleteSubmitted: true,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  handleSearchChanged(e: React.FormEvent<HTMLInputElement>) {\r\n    this.loadRecords(e.currentTarget.value);\r\n  }\r\n\r\n  loadRecords(query: string = '') {\r\n    this.setState({ ...this.state, searchValue: query });\r\n    let searchEndpoint =\r\n      Constants.ApiEndpoint + ApiRoutes.DeviceActions + '?limit=100';\r\n\r\n    if (query) {\r\n      searchEndpoint += '&query=' + query;\r\n    }\r\n\r\n    axios\r\n      .get(searchEndpoint, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      .then(\r\n        resp => {\r\n          let response = resp.data as Array<\r\n            Api.DeviceActionClientResponseModel\r\n          >;\r\n          let viewModels: Array<DeviceActionViewModel> = [];\r\n          let mapper = new DeviceActionMapper();\r\n\r\n          response.forEach(x => {\r\n            viewModels.push(mapper.mapApiResponseToViewModel(x));\r\n          });\r\n\r\n          this.setState({\r\n            records: viewModels,\r\n            filteredRecords: viewModels,\r\n            loading: false,\r\n            loaded: true,\r\n            errorOccurred: false,\r\n            errorMessage: '',\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n          this.setState({\r\n            records: new Array<DeviceActionViewModel>(),\r\n            filteredRecords: new Array<DeviceActionViewModel>(),\r\n            loading: false,\r\n            loaded: false,\r\n            errorOccurred: true,\r\n            errorMessage: 'Error from API',\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  filterGrid() {}\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <LoadingForm />;\r\n    } else if (this.state.errorOccurred) {\r\n      return <ErrorForm message={this.state.errorMessage} />;\r\n    } else if (this.state.loaded) {\r\n      let errorResponse: JSX.Element = <span />;\r\n\r\n      if (this.state.deleteSubmitted) {\r\n        if (this.state.deleteSuccess) {\r\n          errorResponse = (\r\n            <div className=\"alert alert-success\">\r\n              {this.state.deleteResponse}\r\n            </div>\r\n          );\r\n        } else {\r\n          errorResponse = (\r\n            <div className=\"alert alert-danger\">\r\n              {this.state.deleteResponse}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      return (\r\n        <div>\r\n          {errorResponse}\r\n          <form>\r\n            <div className=\"form-group row\">\r\n              <div className=\"col-sm-4\" />\r\n              <div className=\"col-sm-4\">\r\n                <input\r\n                  name=\"search\"\r\n                  className=\"form-control\"\r\n                  placeholder={'Search'}\r\n                  value={this.state.searchValue}\r\n                  onChange={e => this.handleSearchChanged(e)}\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-4\">\r\n                <button\r\n                  className=\"btn btn-primary btn-sm align-middle float-right vertically-center search-create-button\"\r\n                  onClick={e => this.handleCreateClick(e)}\r\n                >\r\n                  <i className=\"fas fa-plus\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n          <ReactTable\r\n            data={this.state.filteredRecords}\r\n            columns={[\r\n              {\r\n                Header: 'DeviceAction',\r\n                columns: [\r\n                  {\r\n                    Header: 'Action',\r\n                    accessor: 'action',\r\n                    Cell: props => {\r\n                      return <span>{String(props.original.action)}</span>;\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Device',\r\n                    accessor: 'deviceId',\r\n                    Cell: props => {\r\n                      return (\r\n                        <a\r\n                          href=\"\"\r\n                          onClick={e => {\r\n                            e.preventDefault();\r\n                            this.props.history.push(\r\n                              ClientRoutes.Devices +\r\n                                '/' +\r\n                                props.original.deviceId\r\n                            );\r\n                          }}\r\n                        >\r\n                          {String(\r\n                            props.original.deviceIdNavigation.toDisplay()\r\n                          )}\r\n                        </a>\r\n                      );\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Name',\r\n                    accessor: 'name',\r\n                    Cell: props => {\r\n                      return <span>{String(props.original.name)}</span>;\r\n                    },\r\n                  },\r\n                  {\r\n                    Header: 'Actions',\r\n                    Cell: row => (\r\n                      <div>\r\n                        <button\r\n                          className=\"btn btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleDetailClick(\r\n                              e,\r\n                              row.original as Api.DeviceActionClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"fas fa-search\" />\r\n                        </button>\r\n                        &nbsp;\r\n                        <button\r\n                          className=\"btn btn-primary btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleEditClick(\r\n                              e,\r\n                              row.original as Api.DeviceActionClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"fas fa-edit\" />\r\n                        </button>\r\n                        &nbsp;\r\n                        <button\r\n                          className=\"btn btn-danger btn-sm\"\r\n                          onClick={e => {\r\n                            this.handleDeleteClick(\r\n                              e,\r\n                              row.original as Api.DeviceActionClientResponseModel\r\n                            );\r\n                          }}\r\n                        >\r\n                          <i className=\"far fa-trash-alt\" />\r\n                        </button>\r\n                      </div>\r\n                    ),\r\n                  },\r\n                ],\r\n              },\r\n            ]}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>664ff182ff0bd6e5e4283aeeb47a50d2</Hash>\r\n</Codenesium>*/","import * as React from 'react';\r\nimport { Route, Switch, match, BrowserRouter } from 'react-router-dom';\r\nimport { App } from './app';\r\nimport Dashboard from './components/dashboard';\r\nimport { Security, ImplicitCallback, SecureRoute } from '@okta/okta-react';\r\nimport DeviceCreateComponent from './components/device/deviceCreateForm';\r\nimport DeviceDetailComponent from './components/device/deviceDetailForm';\r\nimport DeviceEditComponent from './components/device/deviceEditForm';\r\nimport DeviceSearchComponent from './components/device/deviceSearchForm';\r\nimport DeviceActionCreateComponent from './components/deviceAction/deviceActionCreateForm';\r\nimport DeviceActionDetailComponent from './components/deviceAction/deviceActionDetailForm';\r\nimport DeviceActionEditComponent from './components/deviceAction/deviceActionEditForm';\r\nimport DeviceActionSearchComponent from './components/deviceAction/deviceActionSearchForm';\r\n\r\nconst config = {\r\n  oidc: {\r\n    clientId: '<okta_client_id>',\r\n    issuer: 'https://<okta_application_url>/oauth2/default',\r\n    redirectUri: 'https://<your_public_webserver>/implicit/callback',\r\n    scope: 'openid profile email',\r\n  },\r\n};\r\n\r\nexport const AppRouter: React.StatelessComponent<{}> = () => {\r\n  const query = new URLSearchParams(location.search);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Security\r\n        issuer={config.oidc.issuer}\r\n        client_id={config.oidc.clientId}\r\n        redirect_uri={config.oidc.redirectUri}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Route component={App} />\r\n          <SecureRoute\r\n            path=\"/protected\"\r\n            component={() => '<div>secure route</div>'}\r\n          />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Dashboard} />\r\n            <Route path=\"/devices/create\" component={DeviceCreateComponent} />\r\n            <Route path=\"/devices/edit/:id\" component={DeviceEditComponent} />\r\n            <Route path=\"/devices/:id\" component={DeviceDetailComponent} />\r\n            <Route path=\"/devices\" component={DeviceSearchComponent} />\r\n            <Route\r\n              path=\"/deviceactions/create\"\r\n              component={DeviceActionCreateComponent}\r\n            />\r\n            <Route\r\n              path=\"/deviceactions/edit/:id\"\r\n              component={DeviceActionEditComponent}\r\n            />\r\n            <Route\r\n              path=\"/deviceactions/:id\"\r\n              component={DeviceActionDetailComponent}\r\n            />\r\n            <Route\r\n              path=\"/deviceactions\"\r\n              component={DeviceActionSearchComponent}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Security>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\n\r\n/*<Codenesium>\r\n    <Hash>421222d6d0f22b08d817dc7db947d089</Hash>\r\n</Codenesium>*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {AppRouter} from './router'\r\n\r\n\r\nReactDOM.render(\r\n       <AppRouter />\r\n, document.getElementById('root'));"],"sourceRoot":""}