This setup is for ubuntu,.NET Core and Postgres on AWS LightSail. This will install and run the adventureworks docker application.
It will set the docker daemon to run on boot. Your containers should start automatically becuase the docker compose
file has the containers set to restart always. 
Watchtower is also set up. Watchtower is a container that polls docker hub for new images and updates your containers sutomatically.

1. Execute from the AWS CLI. You may get errors if you don't execute them one at a time.
aws lightsail create-instances --instance-name "adventureworks" --availability-zone "us-east-1b" --blueprint-id "ubuntu_18_04" --bundle-id nano_2_0
aws lightsail create-disk --disk-name adventureworks-data --availability-zone "us-east-1b" --size-in-gb 8
aws lightsail open-instance-public-ports --port-info fromPort=8000,toPort=8000,protocol=TCP --instance-name="adventureworks"
aws lightsail attach-disk --disk-name adventureworks-data --instance-name adventureworks --disk-path /dev/xvdf
aws lightsail allocate-static-ip --static-ip-name "adventureworks-ip" 
aws lightsail attach-static-ip --static-ip-name "adventureworks-ip" --instance-name "adventureworks"
aws lightsail get-instance --instance-name "adventureworks"

2. SSH into the created instance and execute the script below. You can get to the terminal from the LightSail web view.
This will create a docker-compose.yml file and a setup.sh script that will set up Docker on the machine and
docker-compose up your container. It will also set up the volume you created earlier so that your database can be persisted.
You have to presee enter after pasting it to the terminal. 

sudo echo "version: '2'
services:

  web:
    container_name: 'adventureworks-app'
    image: 'codenesium/adventureworks'
    build:
      context: .
      dockerfile: DockerFile
    environment:
       - ASPNETCORE_URLS=http://+:80
       - ConnectionStrings__ApplicationDbContext=Host=adventureworks-db;Persist Security Info=False;User ID=postgres;Password=test;Database=adventureworks;
       - DatabaseProvider=POSTGRESQL
       - MigrateDatabase=true
    volumes:
      - .:/var/www/app
    ports:
     - "80:80"
    restart: always
    depends_on:
     - "db"
    networks:
      - adventureworks-network

  db:
    container_name: 'adventureworks-db'
    image: postgres:9.6-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: adventureworks
    networks:
      - adventureworks-network
    ports:
     - "5433:5432"
    restart: always
    volumes:
         - /database/adventureworks:/var/lib/postgresql/data
  watchtower:
    container_name: 'watchtower'
    image: v2tec/watchtower
    restart: on-failure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30

networks:
    adventureworks-network:
       driver: bridge" >> docker-compose.yml;
   
sudo echo '#!/bin/bash
sudo file -s /dev/xvdf && 
sudo mkfs -t ext4 /dev/xvdf && 
sudo mkdir /database &&
sudo mkdir /database/adventureworks &&
sudo mount /dev/xvdf  /database/adventureworks && 
sudo rmdir /database/adventureworks/lost+found && 
sudo apt-get update && 
sudo apt-get install -y docker && 
sudo apt-get install -y docker-compose && 
sudo service docker start && 
sudo systemctl enable docker  &&
docker pull codenesium/adventureworks && 
sudo docker-compose up;' >> setup.sh;

chmod 755 setup.sh;
sudo sh ./setup.sh;